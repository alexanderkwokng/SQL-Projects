{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww20240\viewh22520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 SQL Data Cleaning Project #1\
\
Goal: To apply best practices of data cleaning of SQL data on fictional data source Northwind Traders\
Skills: Learning to remove duplicate rows, use CASE statement to create new dimensions, identifying and cleaning NULL values\
Tasks: Detect and Remove Duplicates, Clean Data with CASE Statement, Dealing with NULLS in SQL\
\
\ul Task #1 Detect and Remove duplicates\
\ulnone \
\'97\'97\'97\'97\'97\'97 \
\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 SELECT
\f2 \

\f1 	CustomerID,
\f2 \

\f1 	ShipName,
\f2 \

\f1 	ShipAddress,
\f2 \

\f1 	ShipPostalCode,
\f2 \

\f1 	ShipCountry
\f2 \

\f1 FROM
\f2 \

\f1 	Orders;
\f2 \
\
\
\'97\'97\'97\'97\'97\'97\'97\
\

\f1 /*Create Row Number*/
\f2 \
\

\f1 SELECT
\f2 \

\f1 	CustomerID,
\f2 \

\f1 	ShipName,
\f2 \

\f1 	ShipAddress,
\f2 \

\f1 	ShipPostalCode,
\f2 \

\f1 	ShipCountry,
\f2 \

\f1 	ROW_NUMBER() OVER(order by CustomerID) AS rn
\f2 \

\f1 FROM
\f2 \

\f1 	Orders;\
\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf0 \outl0\strokewidth0 \'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \strokec2 \
/*Remove Duplicates */\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 EITH cte1 AS (
\f2 \

\f1 SELECT
\f2 \

\f1 	CustomerID,
\f2 \

\f1 	ShipName,
\f2 \

\f1 	ShipAddress,
\f2 \

\f1 	ShipPostalCode,
\f2 \

\f1 	ShipCountry,
\f2 \

\f1 	ROW_NUMBER() OVER(order by CustomerID) AS rn
\f2 \

\f1 FROM
\f2 \

\f1 	Orders;
\f2 \

\f1 )
\f2 \
\

\f1 SELECT\'a0
\f2 \

\f1 	*
\f2 \

\f1 FROM
\f2 \

\f1 	cte1
\f2 \

\f1 WHERE
\f2 \

\f1 	Rn = 1
\f2 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \'97\'97\'97\'97\'97\'97\'97\
\
Notes: By using row number, you can identify how many duplicates are associated with each customerid. By using CTE1 we are selecting the customer with the first row identified and\
Using WHERE to limit the customer id that appears first as row number.\
\
Key takeaways:\
Row_Number() is a window function in SQL that assigns a unique sequential integer to each row in the result set.\
A Common Table Expression (CTE) \
\
\
\ul Task #2 Clean Data with Case Statements\
\ulnone \
\'97\'97\'97\'97\'97\'97\'97\
\
/*Check to see what the minimum and maximum price are for freight */\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \outl0\strokewidth0 \strokec2 SELECT\'a0
\f2 \

\f1 	min(freight),
\f2 \

\f1 	max(freight)
\f2 \

\f1 FROM
\f2 \

\f1 	orders
\f2 \
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \
\'97\'97\'97\'97\'97\'97\'97\
\
/*Write CASE Statement to categorize Freight Charges\
Low charge is less than 50, Medium charge is between 50 and 200 and High Charge is greater than 200 */\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \outl0\strokewidth0 \strokec2 SELECT\'a0
\f2 \

\f1 	Freight,
\f2 \

\f1 	CASE WHEN Freight < 50 THEN 'Low Charge'\'a0
\f2 \

\f1 		WHEN Freight BETWEEN 50 AND 200 THEN 'Medium Charge'
\f2 \

\f1 		WHEN Freight > 200 THEN 'High Charge'
\f2 \

\f1 	END AS Charge
\f2 \

\f1 FROM
\f2 \

\f1 	orders
\f2 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \'97\'97\'97\'97\'97\'97\'97\
\
Key Takeaways: \
The CASE Statement in SQL is a conditional expression that allows you to evaluate one or a series of conditions\
The basic syntax of a CASE statement is as follows: CASE WHEN _____ THEN ____ END\
Else is option\
\
\
\ul Task #3 Dealing with NULLs in SQL\
\ulnone \
\'97\'97\'97\'97\'97\'97\'97\
/* Write statement and identify Region is NULL */\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \outl0\strokewidth0 \strokec2 SELECT
\f2 \

\f1 	CustomerID,\'a0
\f2 \

\f1 	ContactName,\'a0
\f2 \

\f1 	City,\'a0
\f2 \

\f1 	Region
\f2 \

\f1 FROM
\f2 \

\f1 	Customers\
\pard\pardeftab720\partightenfactor0

\f2 \cf0 \outl0\strokewidth0 \'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \strokec2 /* Use ISNULL to replace all NULL values in Region column with label \'91No region\'92\
\

\f1 SELECT
\f2 \

\f1 	CustomerID,\'a0
\f2 \

\f1 	ContactName,\'a0
\f2 \

\f1 	City,\'a0
\f2 \

\f1 	ISNULL(Region, 'No Region') AS Region
\f2 \

\f1 FROM
\f2 \

\f1 	Customers
\f2 \
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \strokec2 \
Notes: We created a new region column that replaces all NULL values with string \'91No region\'92\
\
Key Takeaways:\
The ISNULL Function in SQL is a tool for handling NULL values in database management \
The basic syntax of a ISNULL statement is ISNULL(expression, replacement_value)\
ISNULL is used in SQL Server, while NVL is used in Oracle.\
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \
}